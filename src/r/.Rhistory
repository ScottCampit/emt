if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("Affy", "edgeR", "limma"))
library(affy)
library(edgeR)
library(limma)
install.packages(c('tidyverse', 'plotly'))
library(tidyr)
library(plotly)
filename = '/home/scampit/Data/RNASeq/CCLE/CCLE_RNAseq_genes_counts_20180929.gct'
data     = read.table(file=filename,
sep='\t',
header=TRUE,
skip=2)
to_remove = duplicated(data[, 1])
data = data[!to_remove, ]
# Get gene identifiers
ids      = data[, 1:2]
data[, c("Name", "Description")] = list(NULL)
# Get column identifiers
col_ids = as.data.frame(colnames(data))
col_ids = separate(data=col_ids,
col='colnames(data)',
into=c("CCL", "Tissue"),
sep='_',
remove=FALSE,
extra='merge')
col_ids[, 'colnames(data)'] = NULL
cnt = as.data.frame(table(col_ids[, 2]))
to_remove = cnt[, 2] < 15
to_remove = cnt[to_remove, ]
to_remove = as.character(to_remove[, 'Var1'])
idx = col_ids[, 2] %in% to_remove
col_ids = col_ids[!idx, ]
data    = data[, !idx]
# Set column names to be tissue type. This will be used to split the data up by groups.
colnames(data) = col_ids[, 2]
dge = DGEList(counts=data, genes=ids[, 1])
dge = calcNormFactors(dge)
groups = as.character(cnt[!cnt[, 2] < 15, 1])
tbl = list()
for (i in groups){
# Get tissue model (tx) and control (cntr)
tx   = dge[, i]
cntr = dge[, ~i]
# Perform voom transformation with quantile normalization
v = voom(tx, cntr, normalize='quantile')
# Perform limma
fit = lmFit(v, cntr)
fit = eBayes(fit)
tbl[[i]] = topTable(fit, coef=ncol(cntr))
}
for (i in groups){
print(i)
}
tx   = dge[, i]
View(tx)
View(dge)
cntr = dge[, ~i]
cntr = dge[, !i]
i
dge[, !i]
tx   = dge[, i]
cntr = dge[, !i]
cntr = dge[, -i]
cntr = dge %>% select(-i)
colnames(dge)
cntr = dge[, !(names(dge) %in% i)]
v = voom(tx, cntr, normalize='quantile')
colnames(tx)
colnames(cntr)
tx   = dge[, names(dge) %in% i]
colnames(cntr)
tx   = dge[, names(dge) %in% i]
colnames(tx)
tx   = dge[, (names(dge) %in% i)]
colnames(tx)
View(tx)
tx   = dge %>% select(i)
tx   = dge[, i]
View(tx)
df = dge.data.frame
df = dge@Data.data.frame
dge.counts
df = dge@Data$data.frame
df = dge$data.frame
dge$samples
dge = DGEList(counts=data, genes=ids[, 1])
keep = rowSums(cpm(dge) > 0.5) >= 2
dge = dge[keep, group=factor(as.character(cnt[!cnt[, 2] < 15, 1])), keep.lib.sizes=FALSE]
factor(as.character(cnt[!cnt[, 2] < 15, 1]))
dge = dge[keep, group=factor(as.character(cnt[!cnt[, 2] < 15, 1])), keep.lib.sizes=FALSE]
dge = dge[keep, group=factor(colnames(data)), keep.lib.sizes=FALSE]
dge = dge[keep, , keep.lib.sizes=FALSE]
dge = calcNormFactors(dge)
for (i in groups){
# Get tissue model (tx) and control (cntr)
print(i)
}
tx   = dge[, i]
for (j in tx){
print(j)
}
tx   = dge[[, i]]
data[, i]
ans = data[, i]
ans = as.data.frame(data[, i])
View(ans)
View(data)
ans = as.data.frame(data %>% select(i))
ans = as.data.frame(data %>% select(starts_with(i))
)
idx = col_ids[, 2] %in% i
tx   = dge[, idx]
cntr = dge[, !idx]
v = voom(counts=tx, design=cntr, normalize='quantile')
tx   = dge[, 1:5]
cntr = dge[, 6:10]
v = voom(counts=tx, design=cntr, normalize='quantile')
cntr = model.matrix(dge[, 6:10])
cntr = as.matrix(dge[, 6:10])
v = voom(counts=tx, design=cntr, normalize='quantile')
v = voom(counts=as.matrix(tx), design=cntr, normalize='quantile')
size(tx)
shape(tx)
dim(tx)
dim(cntr)
v = voom(counts=as.matrix(tx), design=as.matrix(cntr))
v = voom(as.matrix(tx), as.matrix(cntr), normalize='quantile')
v = voom(as.matrix(tx), as.matrix(cntr), normalize.method='quantile')
mm = model.matrix(~0 + group)
mm = model.matrix(~0 + groups)
v = voom(as.matrix(tx), mm, normalize.method='quantile')
View(mm)
mm = model.matrix(~0 + colnames(cntr))
v = voom(as.matrix(tx), mm, normalize.method='quantile')
fit = lmFit(v, cntr)
fit = lmFit(v, mm)
coef(fit)
fit = eBayes(fit)
tx   = dge[, idx]
cntr = dge[, !idx]
mm = model.matrix(~0 + colnames(cntr))
v = voom(as.matrix(tx), mm, normalize.method='quantile')
v = voom(tx, mm, normalize.method='quantile')
View(v)
View(mm)
View(mm)
View(dge)
dge.counts
dge$counts
ans = dge$counts
View(ans)
histogram(ans)
hist(ans)
hist(ans-mean(ans) / std(ans))
hist(ans-mean(ans) / stdev(ans))
hist(ans-mean(ans) / sd(ans))
data     = read.table(file=filename,
sep='\t',
header=TRUE,
skip=2)
data     = read.table(file=filename,
sep='\t',
header=TRUE)
filename = '/home/scampit/Data/RNASeq/CCLE/E-MTAB-2770-query-results.tpms.tsv'
data     = read.table(file=filename,
sep='\t',
header=TRUE)
# Install BioCManager and other dependencies to run RNASeq DEG
install.packages(c("BiocManager", "tidyverse", "readxl", 'data.table', 'openxlsx'))
BiocManager::install(c("edgeR", "limma", "GEOquery", "affy",
"hgu133plus2.db", "org.Hs.eg.db"),
dependencies=TRUE,
update=TRUE)
# Install BioCManager and other dependencies to run RNASeq DEG
install.packages(c("BiocManager", "tidyverse", "readxl", 'data.table', 'openxlsx'))
BiocManager::install(c("edgeR", "limma", "GEOquery", "affy",
"hgu133plus2.db", "org.Hs.eg.db"),
dependencies=TRUE,
update=TRUE)
library(data.table)
library(openxlsx)
library(readxl)
library(hgu133plus2.db)
library(org.Hs.eg.db)
library(edgeR)
library(GEOquery)
library(affy)
library(readxl)
filename = '~/Data/Proteomics/Keshamouni/GSE17518_series_matrix_IMR90FibroblastTGFb.xlsx'
tmp = read_excel(filename)
View(tmp)
View(tmp)
row.names(tmp) = tmp[, 1]
tmp[, -1] = NULL
View(tmp)
tmp = read_excel(filename)
tmp[, -1] = NULL
tmp = read_excel(filename)
tmp[, 'mean control'] = NULL
rownames(tmp) = tmp[, 1]
class(tmp)
row.names(tmp, make.names=FALSE) = tmp[, 1]
row.names(tmp) = tmp[, 1]
rownames(tmp) = tmp[, 1]
rownames(tmp) = tmp[, 1]
library(dplyr)
tmp %>%
group_by(ID_REF) %>%
summarise_all(mean) %>%
data.frame() -> newdf
View(newdf)
newdf = newdf[-1, ]
View(newdf)
rownames(newdf) = newdf[, 1]
View(newdf)
newdf[, 1] = NULL
View(newdf)
# Rename columns
condition = c("0", "0", "0", "72", "72", "72")
colnames(newdf) = condition
d0 = DGEList(abs(newdf))
d0 = calcNormFactors(d0)
cutoff = 0.5
drop   = which(apply(cpm(d0), 1, max) < cutoff)
d      = d0[-drop,]
dim(d)
plotMDS(d, col=as.numeric(condition))
mm <- model.matrix(~0 + condition)
y = voom(d, mm, plot=T)
fit <- lmFit(y, mm)
head(coef(fit))
contr <- makeContrasts(condition72 - condition0, levels = colnames(coef(fit)))
contr
tmp = contrasts.fit(fit, contr)
tmp <- eBayes(tmp)
top.table <- topTable(tmp, sort.by = "P", n = Inf)
head(top.table, 20)
# View the number of DE genes
length(which(top.table$adj.P.Val < 0.05))
filename = '~/Data/Proteomics/Keshamouni/processed_keshamouni.xlsx'
write.xlsx(mapped_lst, filename)
f = setDT(top.table)
probes = as.character(rownames(top.table))
# Get identifiers
map = select(hgu133plus2.db,
keys=probes,
columns = c('PROBEID',
'ENTREZID',
'SYMBOL')
)
map = select(hgu133plus2.db,
keys=probes,
columns = c('PROBEID',
'ENTREZID',
'SYMBOL')
)
View(top.table)
View(newdf)
View(d)
map = select(hgu133plus2.db,
keys=rownames(newdf),
columns = c('PROBEID',
'ENTREZID',
'SYMBOL')
)
rownames(newdf)
hgu133plus2.db
map = select(hgu133plus2.db,
keys=rownames(newdf),
columns = c('PROBEID',
'ENTREZID',
'SYMBOL')
)
library(hgu133plus2.db)
library(org.Hs.eg.db)
map = select(hgu133plus2.db,
keys=rownames(newdf),
columns = c('PROBEID',
'ENTREZID',
'SYMBOL')
)
map = select(hgu133plus2.db,
keys=as.character(rownames(newdf)),
columns = c('PROBEID',
'ENTREZID',
'SYMBOL')
)
View(d)
View(tmp)
as.character(rownames(newdf))
hgu133plus2.db
map = select(hgu133plus2.db,
keys=as.character(rownames(newdf)),
columns = c('PROBEID',
'ENTREZID',
'SYMBOL')
)
df = cbind(probes, df)
View(df)
df = setDT(top.table)
View(df)
df = cbind(as.character(rownames(newdf)), df)
View(df)
map = select(hgu133plus2.db,
keys=as.character(rownames(newdf)),
columns = c('PROBEID',
'ENTREZID',
'SYMBOL')
)
map = AnnotationDbi::select(hgu133plus2.db,
keys=as.character(rownames(newdf)),
columns = c('PROBEID',
'ENTREZID',
'SYMBOL')
)
View(map)
View(map)
View(df)
mapped_lst = merge(map, df, by.x="PROBEID", by.y="V1")
filename = '~/Data/Proteomics/Keshamouni/processed_keshamouni.xlsx'
write.xlsx(mapped_lst, filename)
